{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(leaflet)\nlibrary(tigris)\nlibrary(acs)\nlibrary(dplyr)\nrequire(shinyjs)\nlibrary(magrittr)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(plotly)\n\napi.key.install(key=\"34d31b0307b29367f69430db0a1f1596ac6f3dca\")\n\ntheme_GR <- function(){\n  ggplot2::theme(axis.line = ggplot2::element_line(linetype = \"solid\"),\n                 panel.grid.major = ggplot2::element_line(colour = \"gray80\"),\n                 panel.grid.minor = ggplot2::element_line(colour = \"gray90\",\n                                                          linetype = \"dashed\"), panel.background = ggplot2::element_rect(fill = NA),\n                 legend.direction = 'horizontal', legend.position = 'bottom')\n}\n\nshinyServer(function(input, output, session) {\n  \n  progress <- shiny::Progress$new()\n  \n  observeEvent(input$GetData,{\n    shinyjs::addClass(selector = \"body\", class = \"sidebar-collapse\")\n    progress$set(message = \"Getting data\", value = 0)\n  })\n  \n  distances <- eventReactive(input$GetData, {distances = NULL})\n  \n  spatialdata <- eventReactive(input$GetData, {\n    counties <- input$counties\n    states <- counties %>% strsplit(\", \") %>% lapply('[[',2) %>% unlist()\n    counties %<>% strsplit(\", \") %>% lapply('[[',1) %>% unlist()\n    countiesdf <- data.frame(counties, states)\n    countiesdf$counties %<>% paste(\"County\", sep=\" \")\n    \n    split_counties <- split(countiesdf, countiesdf$states)\n    \n    split_counties %<>% lapply(function(x){\n      tracts(state=as.character(x$states[1]),\n             county=as.character(x$counties), cb=TRUE)\n    })\n    \n    rbind_tigris(split_counties)\n  })\n  \n  geodata <- eventReactive(input$GetData, {\n      counties <- input$counties\n      states <- counties %>% strsplit(\", \") %>% lapply('[[',2) %>% unlist()\n      counties %<>% strsplit(\", \") %>% lapply('[[',1) %>% unlist()\n      countiesdf <- data.frame(counties, states)\n      countiesdf$counties %<>% paste(\"County\", sep=\" \")\n      \n      split_counties <- split(countiesdf, countiesdf$states)\n      \n      split_counties %<>% lapply(function(x){\n        geo.make(state=as.character(x$states[1]),\n                 county=as.character(x$counties), tract=\"*\")\n      })\n      \n      geodata <- split_counties[[1]]\n      \n      if(length(split_counties) > 1){\n        for (i in 2:length(split_counties)){\n          if (i==2){geodata <- split_counties[[1]] + split_counties[[2]]}\n          else {geodata <- geodata + split_counties[[i]]}\n        }\n      }\n      progress$inc(.1, detail = paste(\"Geography defined\"))\n      return(geodata)\n  })\n  \n  income_df <- eventReactive(input$GetData, {\n    geodata <- geodata(); spatialdata <- spatialdata();\n    income <- acs.fetch(endyear = 2015, span = 5, geography = geodata, table.number = \"B19001\", col.names = \"pretty\")\n    progress$inc(.3, detail = paste(\"Income data gathered\"))\n  \n    above150K <- rowSums(income@estimate[,16:17])\n    \n    income_df <- data.frame(paste0(str_pad(income@geography$state, 2, \"left\", pad=\"0\"), \n                                   str_pad(income@geography$county, 3, \"left\", pad=\"0\"), \n                                   str_pad(income@geography$tract, 6, \"left\", pad=\"0\")), \n                            income@estimate,\n                            above150K, \n                            stringsAsFactors = FALSE)\n  })\n  \n  edu_df <- eventReactive(input$GetData, {\n    geodata <- geodata(); spatialdata <- spatialdata();\n    edu <- acs.fetch(endyear = 2015, span = 5, geography = geodata, table.number = \"B15001\", col.names = \"pretty\")\n    progress$inc(.3, detail = paste(\"Education data gathered\"))\n    \n    gender <- list()\n    gender[[1]] <- as.data.frame(edu@estimate)[c(grep(\"Female\", colnames(edu@estimate)))]\n    gender[[2]] <- as.data.frame(edu@estimate)[c(grep(\"Male\", colnames(edu@estimate)))]\n    for (i in 1:2){\n      educlass <- list()\n      educlass[[1]] <- gender[[i]][c(grep(\"Less\", colnames(gender[[i]])))]\n      educlass[[2]] <- gender[[i]][c(grep(\"no diploma\", colnames(gender[[i]])))]\n      educlass[[3]] <- gender[[i]][c(grep(\"High school\", colnames(gender[[i]])))]\n      educlass[[4]] <- gender[[i]][c(grep(\"Some college\", colnames(gender[[i]])))]\n      educlass[[5]] <- gender[[i]][c(grep(\"Associate\", colnames(gender[[i]])))]\n      educlass[[6]] <- gender[[i]][c(grep(\"Bachelor\", colnames(gender[[i]])))]\n      educlass[[7]] <- gender[[i]][c(grep(\"professional\", colnames(gender[[i]])))]\n      for (j in 1:7){\n        educlass[[j]] %<>% rowSums()\n      }\n      gender[[i]] <- do.call(\"rbind\", educlass) %>% t\n      gender[[i]] %<>% prop.table(1) %>% as.data.frame\n      colnames(gender[[i]]) <- c(\"No High School\", \"Some High School\", \"High School\", \"Some College\", \"Associate's\", \"Bachelor's\", \"Postgraduate\")\n      gender[[i]]$gender <- ifelse(i==1, \"Female\", \"Male\")\n    }\n    \n    edu_df <- data.frame(paste0(str_pad(edu@geography$state, 2, \"left\", pad=\"0\"), \n                                str_pad(edu@geography$county, 3, \"left\", pad=\"0\"), \n                                str_pad(edu@geography$tract, 6, \"left\", pad=\"0\")),\n                         do.call(\"rbind\", gender),\n                         stringsAsFactors = FALSE)\n    colnames(edu_df)[1] <- \"GEOID\"\n    rownames(edu_df)<-1:nrow(edu_df)\n    return(edu_df)\n  })\n  \n  hhs_df <- eventReactive(input$GetData, {\n    geodata <- geodata(); spatialdata <- spatialdata();\n    hhs <- acs.fetch(endyear = 2015, span = 5, geography = geodata, table.number = \"B25009\", col.names = \"pretty\")\n    progress$inc(.3, detail = paste(\"Housing data gathered\"))\n    \n    ownership <- list()\n    ownership[[1]] <- as.data.frame(hhs@estimate)[c(3:9)]\n    ownership[[2]] <- as.data.frame(hhs@estimate)[c(11:17)]\n    \n    totals <- (ownership[[1]] + ownership[[2]]) %>% rowSums(1)\n\n    \n    for (i in 1:2){\n      colnames(ownership[[i]]) %<>% strsplit(\"occupied: \") %>% lapply('[[',2) %>% unlist\n      ownership[[i]] <- ownership[[i]] / totals\n      ownership[[i]]$ownership <- ifelse(i==1, \"Owner\", \"Renter\")\n    }\n    names <- colnames(ownership[[1]])\n    hhs_df <- data.frame(paste0(str_pad(hhs@geography$state, 2, \"left\", pad=\"0\"), \n                                str_pad(hhs@geography$county, 3, \"left\", pad=\"0\"), \n                                str_pad(hhs@geography$tract, 6, \"left\", pad=\"0\")),\n                         do.call(\"rbind\", ownership),\n                         stringsAsFactors = FALSE)\n    colnames(hhs_df)[1] <- \"GEOID\"; colnames(hhs_df)[-c(1)] <- names\n    rownames(hhs_df)<-1:nrow(hhs_df)\n    return(hhs_df)\n  })\n  \n  income_merged <- eventReactive(input$GetData, {\n    spatialdata <- spatialdata(); income_df2 <- income_df()\n    rownames(income_df2)<-1:nrow(income_df2)\n    names(income_df2)[c(1,2,19)] <-c(\"GEOID\", \"total\", \"over_150\")\n    income_df2$percent <- 100*(income_df2$over_150/income_df2$total)\n    income_merged<- geo_join(spatialdata, income_df2, \"GEOID\", \"GEOID\")\n    income_merged[income_merged$ALAND>0,]  \n  })\n\n  popup <- eventReactive(input$GetData, {\n      paste0(\"GEOID: \", income_merged()$GEOID, \"<br>\", \"Percent of Households above $150k: \", round(income_merged()$percent,2))\n  })\n  \n  pal <- eventReactive(input$GetData, {\n    colorNumeric(\n      palette = \"YlGnBu\",\n      domain = income_merged()$percent\n    )\n  })\n  \n  output$map <- renderLeaflet({\n    req(income_merged())\n    req(edu_df())\n    req(hhs_df())\n    progress$close()\n    \n    \n    leaflet() %>%\n      addProviderTiles(\"CartoDB.Positron\") %>%\n      addPolygons(data = income_merged(), \n                  fillColor = ~pal()(percent), \n                  color = \"#b2aeae\",\n                  fillOpacity = 0.6, \n                  weight = 1, \n                  smoothFactor = 0.2,\n                  highlightOptions = highlightOptions(color = \"white\", weight = 2,bringToFront = TRUE),\n                  popup = popup(), layerId = income_merged()$GEOID)\n  })\n\n  \n  observeEvent(input$map_shape_click, { # update the location selectInput on map clicks\n    output$plot=renderPlot({\n      p <- NULL\n      p <- input$map_shape_click$id\n      if(is.null(p)){p=income_merged()$GEOID[1]}\n      data <- income_merged()[c(5,11:26)] %>% subset(GEOID == p) %>% as.data.frame()\n      data[c(3:17)] <- data[c(3:17)] / data$total\n      data <- data[-c(1,2)] %>% t() %>% as.data.frame()\n      colnames(data) <- c(\"Percentage\")\n      data$bin <- c(\"Less than 10,000\", \"10,000 to 14,999\",\"15,000 to 19,999\", \"20,000 to 24,999\", \"25,000 to 29,999\", \"30,000 to 34,999\", \"35,000 to 39,999\", \"40,000 to 44,999\", \"45,000 to 49,999\", \"50,000 to 59,999\", \"60,000 to 74,999\", \"75,000 to 99,999\", \"100,000 to 124,999\", \"125,000 to 149,999\", \"Above 150,000\") %>% as.factor()\n      data$order <- 1:(length(data$bin))\n      \n      ggplot(data, aes(x=reorder(bin, order), y=Percentage)) + geom_col(fill = \"chartreuse4\") + \n                 theme(axis.title.x=element_blank(), axis.text.x = element_text(angle = 60, hjust = 1)) + \n                 theme_GR()\n    })\n    \n    output$plot_education=renderPlot({\n      p <- NULL\n      p <- input$map_shape_click$id\n      if(is.null(p)){p=income_merged()$GEOID[1]}\n      data <- NULL\n      data <- edu_df()[which(edu_df()$GEOID == p),]\n      data <- data[-c(1)]\n      \n      melted <- NULL\n      melted <- melt(data, id.vars = \"gender\")\n      \n      ggplot(melted, aes(x=variable, y=value, fill = gender)) + geom_col(position = \"dodge\") + \n                 theme(axis.title.x=element_blank(), axis.text.x = element_text(angle = 60, hjust = 1)) +\n                 scale_fill_manual(values = c(\"pink\", \"steelblue1\")) + theme_GR()\n    })\n    \n    output$plot_housing=renderPlot({\n      p <- NULL\n      p <- input$map_shape_click$id\n      if(is.null(p)){p=income_merged()$GEOID[1]}\n      data <- hhs_df()[unique(which(hhs_df()$GEOID == p)),]\n      data <- data[-c(1)]\n      \n      melted <- melt(data, id.vars = \"ownership\")\n      \n      ggplot(melted, aes(x=variable, y=value, fill = ownership)) + geom_col(position = \"dodge\") + \n                 theme(axis.title.x=element_blank(), axis.text.x = element_text(angle = 60, hjust = 1)) +\n                 scale_fill_manual(values = c(\"orange\", \"purple\")) + theme_GR()\n    })\n  })\n  \n  \n  alldata <- eventReactive(input$GetData, {\n    income_merged <- income_merged(); edu_df <- edu_df(); hhs_df <- hhs_df()\n    data <- income_merged[c(5,11:26)] %>% as.data.frame()\n    data[c(3:17)] <- data[c(3:17)] / data$total\n    data <- data[-c(2)]\n    colnames(data)[2:16] <- c(\"Less than 10,000\", \"10,000 to 14,999\",\"15,000 to 19,999\", \"20,000 to 24,999\", \"25,000 to 29,999\", \"30,000 to 34,999\", \"35,000 to 39,999\", \"40,000 to 44,999\", \"45,000 to 49,999\", \"50,000 to 59,999\", \"60,000 to 74,999\", \"75,000 to 99,999\", \"100,000 to 124,999\", \"125,000 to 149,999\", \"Above 150,000\")\n  \n    edu_dfs <- split(edu_df[1:8], edu_df$gender)\n    colnames(edu_dfs[[1]])[2:8] <- paste(\"F\",colnames(edu_dfs[[1]])[2:8], sep=\"_\")\n    colnames(edu_dfs[[2]])[2:8] <- paste(\"M\",colnames(edu_dfs[[2]])[2:8], sep=\"_\")\n    edu_df2 <- left_join(edu_dfs[[1]], edu_dfs[[2]])\n    \n    hhs_df <- split(hhs_df[1:8], hhs_df$ownership)\n    colnames(hhs_df[[1]])[2:8] <- paste(\"O\",colnames(hhs_df[[1]])[2:8], sep=\"_\")\n    colnames(hhs_df[[2]])[2:8] <- paste(\"R\",colnames(hhs_df[[2]])[2:8], sep=\"_\")\n    hhs_df2 <- left_join(hhs_df[[1]], hhs_df[[2]])\n    \n    alldata <- left_join(left_join(data, edu_df2), hhs_df2) %>% na.omit()\n  })\n  \n  distances <- eventReactive(input$classification, {\n    alldata <- alldata()\n    distances <- NULL\n    p <- NULL\n    p <- input$map_shape_click$id\n    if(is.null(p)){p=income_merged()$GEOID[1]}\n    \n    modpca <- prcomp(alldata[-c(1)])\n    d <- dist(modpca$x[,1:min(5, length(alldata$GEOID))])\n    distances <- 1 - as.matrix(d)[which(income_merged()$GEOID == p),]\n    #scale distances\n    distances <- distances - min(distances)\n    distances <- distances/max(distances)\n    names(distances) <- alldata$GEOID\n    \n    return(distances)\n  })\n  \n  popup2 <- eventReactive(input$classification, {\n    paste0(\"GEOID: \", names(distances()), \"<br>\", \"Similarity: \", round(distances(),2))\n  })\n  \n  pal2 <- eventReactive(input$classification, {\n    colorNumeric(\n      palette = \"RdBu\",\n      domain = distances()\n    )\n  })\n  \n  observeEvent(input$classification, {\n    req(distances())\n    req(popup2())\n    req(pal2())\n    \n    leafletProxy(\"map\") %>%\n      clearShapes() %>%\n      addProviderTiles(\"CartoDB.Positron\") %>%\n      addPolygons(data = income_merged(), \n                  fillColor = ~pal2()(distances()), \n                  color = \"#b2aeae\",\n                  fillOpacity = 0.6, \n                  weight = 1, \n                  smoothFactor = 0.2,\n                  highlightOptions = highlightOptions(color = \"white\", weight = 2,bringToFront = TRUE),\n                  popup = popup2(), layerId = income_merged()$GEOID)\n  })\n  \n  session$onSessionEnded(stopApp)  \n   \n})",
    "created" : 1489602293166.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "13|23|19|0|\n",
    "hash" : "3253272186",
    "id" : "DB8A03C5",
    "lastKnownWriteTime" : 1491595817,
    "last_content_update" : 1491595817874,
    "path" : "~/Personal/SB_census/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}